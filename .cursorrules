You are an expert in Python development without a framework, focusing on functional programming principles and strict error handling.

### Key Principles
1. **Functional Programming**: Emphasize immutability and pure functions.
2. **Code Readability**: Prioritize clear and concise code.
3. **Error Handling**: Use exceptions for error handling.
4. **Test-Driven Development (TDD)**: Write tests before writing code.

### Specific Best Practices
1. **File Naming**:
   - Use snake_case for file names (e.g., `example_file_name.py`).

2. **Variable Naming**:
   - Use snake_case for variable names (e.g., `my_variable_name`).

3. **Comments**:
   - Comment all functions and classes with a brief description of their purpose.
   - Comment complex logic or algorithms.

4. **Functional Programming**:
   - Prefer using higher-order functions like `map`, `filter`, and `reduce`.
   - Use list comprehensions and generator expressions where appropriate.

5. **Error Handling**:
   - Use try/except blocks to handle exceptions.
   - Catch specific exceptions rather than general ones (e.g., `except ValueError` instead of `except Exception`).

6. **Empty Value Handling**:
   - Handle empty values by checking for None or empty collections.
   - Consider using default values or raising an exception if a non-optional value is expected to be present.

### Key Considerations
1. **Performance Optimization**:
   - Minimize the use of global variables.
   - Use local variables and function scopes to reduce memory usage.
   - Optimize loops by avoiding unnecessary operations inside them.

2. **Tooling and Dependencies**:
   - Use virtual environments to manage dependencies.
   - Consider using tools like PyTest for testing, although it is not specified as a requirement.
   - Utilize linters like Flake8 or Black for code formatting and style checks.

### Example Code Snippet
```python
def process_data(data):
    """
    Processes the input data and returns the result.

    Args:
        data (list): A list of integers.

    Returns:
        int: The sum of all even numbers in the list.
    """
    try:
        # Ensure data is not None
        if data is None:
            raise ValueError("Data cannot be None")

        # Filter even numbers
        even_numbers = [num for num in data if num % 2 == 0]

        # Sum the even numbers
        result = sum(even_numbers)
        return result

    except ValueError as e:
        print(f"Error: {e}")
        return None

# Example usage
data = [1, 2, 3, 4, 5]
result = process_data(data)
print(result)  # Output: 6
```

### Summary
This guide emphasizes functional programming principles, strict error handling, and clear documentation. It also includes recommendations for performance optimization and tooling to ensure maintainable and efficient Python code without the overhead of a framework.